// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/birdie.proto

package birdie

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BirdieClient is the client API for Birdie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BirdieClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BaseResponse, error)
	Store(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*BaseResponse, error)
	BulkStore(ctx context.Context, in *Entries, opts ...grpc.CallOption) (*BaseResponse, error)
	Load(ctx context.Context, in *LoadQuery, opts ...grpc.CallOption) (*Entry, error)
	Search(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*Entries, error)
}

type birdieClient struct {
	cc grpc.ClientConnInterface
}

func NewBirdieClient(cc grpc.ClientConnInterface) BirdieClient {
	return &birdieClient{cc}
}

func (c *birdieClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/Birdie/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdieClient) Store(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/Birdie/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdieClient) BulkStore(ctx context.Context, in *Entries, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/Birdie/BulkStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdieClient) Load(ctx context.Context, in *LoadQuery, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := c.cc.Invoke(ctx, "/Birdie/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdieClient) Search(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*Entries, error) {
	out := new(Entries)
	err := c.cc.Invoke(ctx, "/Birdie/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BirdieServer is the server API for Birdie service.
// All implementations must embed UnimplementedBirdieServer
// for forward compatibility
type BirdieServer interface {
	Ping(context.Context, *emptypb.Empty) (*BaseResponse, error)
	Store(context.Context, *Entry) (*BaseResponse, error)
	BulkStore(context.Context, *Entries) (*BaseResponse, error)
	Load(context.Context, *LoadQuery) (*Entry, error)
	Search(context.Context, *SearchQuery) (*Entries, error)
	mustEmbedUnimplementedBirdieServer()
}

// UnimplementedBirdieServer must be embedded to have forward compatible implementations.
type UnimplementedBirdieServer struct {
}

func (UnimplementedBirdieServer) Ping(context.Context, *emptypb.Empty) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBirdieServer) Store(context.Context, *Entry) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedBirdieServer) BulkStore(context.Context, *Entries) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkStore not implemented")
}
func (UnimplementedBirdieServer) Load(context.Context, *LoadQuery) (*Entry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedBirdieServer) Search(context.Context, *SearchQuery) (*Entries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedBirdieServer) mustEmbedUnimplementedBirdieServer() {}

// UnsafeBirdieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BirdieServer will
// result in compilation errors.
type UnsafeBirdieServer interface {
	mustEmbedUnimplementedBirdieServer()
}

func RegisterBirdieServer(s grpc.ServiceRegistrar, srv BirdieServer) {
	s.RegisterService(&Birdie_ServiceDesc, srv)
}

func _Birdie_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdieServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Birdie/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdieServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Birdie_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdieServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Birdie/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdieServer).Store(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Birdie_BulkStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdieServer).BulkStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Birdie/BulkStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdieServer).BulkStore(ctx, req.(*Entries))
	}
	return interceptor(ctx, in, info, handler)
}

func _Birdie_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdieServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Birdie/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdieServer).Load(ctx, req.(*LoadQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Birdie_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdieServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Birdie/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdieServer).Search(ctx, req.(*SearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Birdie_ServiceDesc is the grpc.ServiceDesc for Birdie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Birdie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Birdie",
	HandlerType: (*BirdieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Birdie_Ping_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _Birdie_Store_Handler,
		},
		{
			MethodName: "BulkStore",
			Handler:    _Birdie_BulkStore_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _Birdie_Load_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Birdie_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/birdie.proto",
}
